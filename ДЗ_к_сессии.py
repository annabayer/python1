import numpy as np
import math

def func1(x):
    return (((x+8)**(1./8))/math.sin(x/8)) + math.log(x, 10)
func1(3)

v = [2, 5, 8, 2, 3, 5]
b = [7, 1, 3, 2, 3, 8]
def func2(v, b):
    a = 0
    for i in range(len(v)):
        a += v[i]**2
    return a + (max(b) - min(b)/sum(b)) + sum(b[:3])
func2(v, b)


A = np.array([[2, 3, 2], [3, 5, 6], [4, 8, 12]])
B = np.array([[6, 6, 2], [4, 7, 6], [5, 8, 7]])
E = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]])
C = A.transpose()
a = np.dot(np.dot(C, A), B) + np.dot(np.dot(A, np.linalg.inv(B)), E)
print(a)
[[ 736.16666667 1105.66666667  865.66666667]
 [1369.58333333 2057.83333333 1620.83333333]
 [1866.66666667 2810.66666667 2226.66666667]]
v = [2, 3, 4, 2, 3, 2, 3, 4, 1, 1, 1, 5, 6, 6, 6]
v.extend([5, 7, 8])
v
[2, 3, 4, 2, 3, 2, 3, 4, 1, 1, 1, 5, 6, 6, 6, 5, 7, 8]
v.sort()
v
[1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 5, 5, 6, 6, 6, 7, 8]
v.pop(4)
v
[1, 1, 1, 2, 2, 3, 3, 3, 4, 4, 5, 5, 6, 6, 6, 7, 8]
v.insert(2, 6)
v
[1, 1, 6, 1, 2, 2, 3, 3, 3, 4, 4, 5, 5, 6, 6, 6, 7, 8]
v.extend(b)
v
[1, 1, 6, 1, 2, 2, 3, 3, 3, 4, 4, 5, 5, 6, 6, 6, 7, 8, 7, 1, 3, 2, 3, 8]

W = {'a': 100,
    'b': 500,
    'c': 60}
print('Обозначения букв: ', list(W.keys()))
print('Цифры: ', list(W.values()))
Обозначения букв:  ['a', 'b', 'c']
Цифры:  [100, 500, 60]
Z = {'d': 400,
    'e': 789,
    'f': 350}
W.update(Z)
W
{'a': 100, 'b': 500, 'c': 60, 'd': 400, 'e': 789, 'f': 350}
symbols = ['b', 'p', 'b']
for symb in symbols:
    if symb in W:
        print(f"Символ {symb} есть в словаре")
    else:
        print(f"Символа {symb} нет в словаре")
Символ b есть в словаре
Символа p нет в словаре
Символ b есть в словаре
print("Количество ключей в словаре: ", len(W.keys()))
Количество ключей в словаре:  6
W.pop('f')
W
{'a': 100, 'b': 500, 'c': 60, 'd': 400, 'e': 789}
W['a'] = 500
a = tuple()
for i in W:
    a += ((i, W[i]))
print(a)
('a', 500, 'b', 500, 'c', 60, 'd', 400, 'e', 789)
W['g'] = 300
W
{'a': 500, 'b': 500, 'c': 60, 'd': 500, 'e': 789, 'g': 300}
Q = W.copy()
Q
{'a': 500, 'b': 500, 'c': 60, 'd': 500, 'e': 789, 'g': 300}
Q.clear()
print(W, Q, sep='\n')
{'a': 500, 'b': 500, 'c': 60, 'd': 500, 'e': 789, 'g': 300}
{}

a = [0, 0, 0]
for i in range(5):
    print(f"{i+1}: {a}")
1: [0, 0, 0]
2: [0, 0, 0]
3: [0, 0, 0]
4: [0, 0, 0]
5: [0, 0, 0]
sum(np.arange(1, 101))
5050
def calc_positive(v):
    cnt = 0
    for i in v:
        if i > 0:
            cnt += 1
    return cnt
a = [5964, -12, -68874, 101, -103, -741, 36985]
b = [-713, -12563, -89, -45698, -898, -75632, -635]
print(calc_positive(a))
print(calc_positive(b))
3
0
def has_same(v):
    array = {}
    for i in v:
        if i not in array:
            array[i] = 1
        else:
            print("yes")
            return True
    print("ERROR")
    return False
a = [956820, 956620, 936820]
b = [24930566, 24960566, 24930566]
c = [3496, 3496, 3496]
tmp = has_same(a)
tmp = has_same(b)
tmp = has_same(c)
ERROR
yes
yes
def get_third(a, b, c):
    if (a + b) == c:
        print("yes")
        return
    elif (a + c) == b:
        print("yes")
        return
    elif (b + c) == a:
        print("yes")
        return
    print("no")
    return
get_third(9760, 3594, 6166)
get_third(56783, 49998, 6784)
yes
no
print(np.arange(2, 699, 2))
[  2   4   6   8  10  12  14  16  18  20  22  24  26  28  30  32  34  36
  38  40  42  44  46  48  50  52  54  56  58  60  62  64  66  68  70  72
  74  76  78  80  82  84  86  88  90  92  94  96  98 100 102 104 106 108
 110 112 114 116 118 120 122 124 126 128 130 132 134 136 138 140 142 144
 146 148 150 152 154 156 158 160 162 164 166 168 170 172 174 176 178 180
 182 184 186 188 190 192 194 196 198 200 202 204 206 208 210 212 214 216
 218 220 222 224 226 228 230 232 234 236 238 240 242 244 246 248 250 252
 254 256 258 260 262 264 266 268 270 272 274 276 278 280 282 284 286 288
 290 292 294 296 298 300 302 304 306 308 310 312 314 316 318 320 322 324
 326 328 330 332 334 336 338 340 342 344 346 348 350 352 354 356 358 360
 362 364 366 368 370 372 374 376 378 380 382 384 386 388 390 392 394 396
 398 400 402 404 406 408 410 412 414 416 418 420 422 424 426 428 430 432
 434 436 438 440 442 444 446 448 450 452 454 456 458 460 462 464 466 468
 470 472 474 476 478 480 482 484 486 488 490 492 494 496 498 500 502 504
 506 508 510 512 514 516 518 520 522 524 526 528 530 532 534 536 538 540
 542 544 546 548 550 552 554 556 558 560 562 564 566 568 570 572 574 576
 578 580 582 584 586 588 590 592 594 596 598 600 602 604 606 608 610 612
 614 616 618 620 622 624 626 628 630 632 634 636 638 640 642 644 646 648
 650 652 654 656 658 660 662 664 666 668 670 672 674 676 678 680 682 684
 686 688 690 692 694 696 698]
sum(np.arange(0, 15))
105
sum(np.arange(569, 602))
19305
sum(np.arange(-65, 13))
-2067
a = np.uint64(1)
for i in np.arange(1, 85, 2):
    a *= i
print(a)
5.363471028174829e+62
array = np.arange(55, 3946, 5)
array
array([  55,   60,   65,   70,   75,   80,   85,   90,   95,  100,  105,
        110,  115,  120,  125,  130,  135,  140,  145,  150,  155,  160,
        165,  170,  175,  180,  185,  190,  195,  200,  205,  210,  215,
        220,  225,  230,  235,  240,  245,  250,  255,  260,  265,  270,
        275,  280,  285,  290,  295,  300,  305,  310,  315,  320,  325,
        330,  335,  340,  345,  350,  355,  360,  365,  370,  375,  380,
        385,  390,  395,  400,  405,  410,  415,  420,  425,  430,  435,
        440,  445,  450,  455,  460,  465,  470,  475,  480,  485,  490,
        495,  500,  505,  510,  515,  520,  525,  530,  535,  540,  545,
        550,  555,  560,  565,  570,  575,  580,  585,  590,  595,  600,
        605,  610,  615,  620,  625,  630,  635,  640,  645,  650,  655,
        660,  665,  670,  675,  680,  685,  690,  695,  700,  705,  710,
        715,  720,  725,  730,  735,  740,  745,  750,  755,  760,  765,
        770,  775,  780,  785,  790,  795,  800,  805,  810,  815,  820,
        825,  830,  835,  840,  845,  850,  855,  860,  865,  870,  875,
        880,  885,  890,  895,  900,  905,  910,  915,  920,  925,  930,
        935,  940,  945,  950,  955,  960,  965,  970,  975,  980,  985,
        990,  995, 1000, 1005, 1010, 1015, 1020, 1025, 1030, 1035, 1040,
       1045, 1050, 1055, 1060, 1065, 1070, 1075, 1080, 1085, 1090, 1095,
       1100, 1105, 1110, 1115, 1120, 1125, 1130, 1135, 1140, 1145, 1150,
       1155, 1160, 1165, 1170, 1175, 1180, 1185, 1190, 1195, 1200, 1205,
       1210, 1215, 1220, 1225, 1230, 1235, 1240, 1245, 1250, 1255, 1260,
       1265, 1270, 1275, 1280, 1285, 1290, 1295, 1300, 1305, 1310, 1315,
       1320, 1325, 1330, 1335, 1340, 1345, 1350, 1355, 1360, 1365, 1370,
       1375, 1380, 1385, 1390, 1395, 1400, 1405, 1410, 1415, 1420, 1425,
       1430, 1435, 1440, 1445, 1450, 1455, 1460, 1465, 1470, 1475, 1480,
       1485, 1490, 1495, 1500, 1505, 1510, 1515, 1520, 1525, 1530, 1535,
       1540, 1545, 1550, 1555, 1560, 1565, 1570, 1575, 1580, 1585, 1590,
       1595, 1600, 1605, 1610, 1615, 1620, 1625, 1630, 1635, 1640, 1645,
       1650, 1655, 1660, 1665, 1670, 1675, 1680, 1685, 1690, 1695, 1700,
       1705, 1710, 1715, 1720, 1725, 1730, 1735, 1740, 1745, 1750, 1755,
       1760, 1765, 1770, 1775, 1780, 1785, 1790, 1795, 1800, 1805, 1810,
       1815, 1820, 1825, 1830, 1835, 1840, 1845, 1850, 1855, 1860, 1865,
       1870, 1875, 1880, 1885, 1890, 1895, 1900, 1905, 1910, 1915, 1920,
       1925, 1930, 1935, 1940, 1945, 1950, 1955, 1960, 1965, 1970, 1975,
       1980, 1985, 1990, 1995, 2000, 2005, 2010, 2015, 2020, 2025, 2030,
       2035, 2040, 2045, 2050, 2055, 2060, 2065, 2070, 2075, 2080, 2085,
       2090, 2095, 2100, 2105, 2110, 2115, 2120, 2125, 2130, 2135, 2140,
       2145, 2150, 2155, 2160, 2165, 2170, 2175, 2180, 2185, 2190, 2195,
       2200, 2205, 2210, 2215, 2220, 2225, 2230, 2235, 2240, 2245, 2250,
       2255, 2260, 2265, 2270, 2275, 2280, 2285, 2290, 2295, 2300, 2305,
       2310, 2315, 2320, 2325, 2330, 2335, 2340, 2345, 2350, 2355, 2360,
       2365, 2370, 2375, 2380, 2385, 2390, 2395, 2400, 2405, 2410, 2415,
       2420, 2425, 2430, 2435, 2440, 2445, 2450, 2455, 2460, 2465, 2470,
       2475, 2480, 2485, 2490, 2495, 2500, 2505, 2510, 2515, 2520, 2525,
       2530, 2535, 2540, 2545, 2550, 2555, 2560, 2565, 2570, 2575, 2580,
       2585, 2590, 2595, 2600, 2605, 2610, 2615, 2620, 2625, 2630, 2635,
       2640, 2645, 2650, 2655, 2660, 2665, 2670, 2675, 2680, 2685, 2690,
       2695, 2700, 2705, 2710, 2715, 2720, 2725, 2730, 2735, 2740, 2745,
       2750, 2755, 2760, 2765, 2770, 2775, 2780, 2785, 2790, 2795, 2800,
       2805, 2810, 2815, 2820, 2825, 2830, 2835, 2840, 2845, 2850, 2855,
       2860, 2865, 2870, 2875, 2880, 2885, 2890, 2895, 2900, 2905, 2910,
       2915, 2920, 2925, 2930, 2935, 2940, 2945, 2950, 2955, 2960, 2965,
       2970, 2975, 2980, 2985, 2990, 2995, 3000, 3005, 3010, 3015, 3020,
       3025, 3030, 3035, 3040, 3045, 3050, 3055, 3060, 3065, 3070, 3075,
       3080, 3085, 3090, 3095, 3100, 3105, 3110, 3115, 3120, 3125, 3130,
       3135, 3140, 3145, 3150, 3155, 3160, 3165, 3170, 3175, 3180, 3185,
       3190, 3195, 3200, 3205, 3210, 3215, 3220, 3225, 3230, 3235, 3240,
       3245, 3250, 3255, 3260, 3265, 3270, 3275, 3280, 3285, 3290, 3295,
       3300, 3305, 3310, 3315, 3320, 3325, 3330, 3335, 3340, 3345, 3350,
       3355, 3360, 3365, 3370, 3375, 3380, 3385, 3390, 3395, 3400, 3405,
       3410, 3415, 3420, 3425, 3430, 3435, 3440, 3445, 3450, 3455, 3460,
       3465, 3470, 3475, 3480, 3485, 3490, 3495, 3500, 3505, 3510, 3515,
       3520, 3525, 3530, 3535, 3540, 3545, 3550, 3555, 3560, 3565, 3570,
       3575, 3580, 3585, 3590, 3595, 3600, 3605, 3610, 3615, 3620, 3625,
       3630, 3635, 3640, 3645, 3650, 3655, 3660, 3665, 3670, 3675, 3680,
       3685, 3690, 3695, 3700, 3705, 3710, 3715, 3720, 3725, 3730, 3735,
       3740, 3745, 3750, 3755, 3760, 3765, 3770, 3775, 3780, 3785, 3790,
       3795, 3800, 3805, 3810, 3815, 3820, 3825, 3830, 3835, 3840, 3845,
       3850, 3855, 3860, 3865, 3870, 3875, 3880, 3885, 3890, 3895, 3900,
       3905, 3910, 3915, 3920, 3925, 3930, 3935, 3940, 3945])
def func():
    for i in range(39, 249):
        if i != 139:
            print(i, end=" ")
        else:
            return
func()
39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 
lst = [11,5, 8, 32, 15, 3, 20, 132, 21, 4, 555, 9, 20]
sum_lst = 0
for i in lst:
    if i > 30 and (i % 3) == 0:
        print(i, end=" ")
    else:
        sum_lst += i
print(f"\nSumma : {sum_lst}")
132 555 
Summa : 148
def get_season(i):
    if i <=2 or i == 12:
        return("Зима")
    elif i <= 5:
        return("Весна")
    elif i <= 8:
        return("Лето")
    elif i <= 11:
        return("Осень")
get_season(12)
'Зима'
def get_numbers(n):
    res = list()
    if n >= 0:
        for i in range(0, n+1):
            res.append(i)
    else:
        for i in range(n, 1):
            res.append(i)
    return res
get_numbers(66)
[0,
 1,
 2,
 3,
 4,
 5,
 6,
 7,
 8,
 9,
 10,
 11,
 12,
 13,
 14,
 15,
 16,
 17,
 18,
 19,
 20,
 21,
 22,
 23,
 24,
 25,
 26,
 27,
 28,
 29,
 30,
 31,
 32,
 33,
 34,
 35,
 36,
 37,
 38,
 39,
 40,
 41,
 42,
 43,
 44,
 45,
 46,
 47,
 48,
 49,
 50,
 51,
 52,
 53,
 54,
 55,
 56,
 57,
 58,
 59,
 60,
 61,
 62,
 63,
 64,
 65,
 66]
get_numbers(-31)
[-31,
 -30,
 -29,
 -28,
 -27,
 -26,
 -25,
 -24,
 -23,
 -22,
 -21,
 -20,
 -19,
 -18,
 -17,
 -16,
 -15,
 -14,
 -13,
 -12,
 -11,
 -10,
 -9,
 -8,
 -7,
 -6,
 -5,
 -4,
 -3,
 -2,
 -1,
 0]
def get_fibbonachi(n):
    cnt = 1
    prev = 1
    res = [1, 1]
    while cnt < n:
        new_prev = cnt
        cnt += prev
        prev = new_prev
        res.append(cnt)
    return res
get_fibbonachi(444)
[1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610]
def get_dist(n, k):
    day = 1
    cnt = n
    while cnt < k:
        n *= 1.2
        cnt += n
        day += 1
    return day
get_dist(10, 500)
14
def get_armstrong():
    res = list()
    for i in range(100, 10000):
        tmp = 0
        cur = i
        n = len(str(i))
        for j in range(n):
            tmp += (i % 10) ** n
            i //= 10
        if tmp == cur:
            res.append(cur)
    return res
get_armstrong()
[153, 370, 371, 407, 1634, 8208, 9474]
